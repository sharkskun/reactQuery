// import React, { useState } from 'react';
// import { useQuery, useMutation, useQueryClient } from 'react-query';
// import { useTable, usePagination } from 'react-table';
// import axios from 'axios';
// import { apiUrl } from '@/constant/api';
// import { ToastContainer, toast } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';

// const fetchUsers = async ({ queryKey }) => {
//   const [, { limit, offset }] = queryKey;
//   const { data } = await axios.get(`${apiUrl}/api/users`, {
//     params: { limit, offset },
//   });
//   return data;
// };

// const deleteUser = async (id) => {
//   await axios.delete(`${apiUrl}/api/users/${id}`);
// };

// const updateUser = async ({ id, put }) => {
//   await axios.put(`${apiUrl}/api/users/${id}`, put);
// };

// const UserTable = () => {
//   const [limit] = useState(5);
//   const queryClient = useQueryClient();

//   const [pageIndex, setPageIndex] = useState(0);

//   const { data, isLoading, isError, error } = useQuery(
//     ['users', { limit, offset: pageIndex * limit }],
//     fetchUsers,
//     {
//       keepPreviousData: true,
//     }
//   );

//   const deleteMutation = useMutation(deleteUser, {
//     onSuccess: () => {
//       queryClient.invalidateQueries('users');
//       toast.success('User deleted successfully');
//     },
//     onError: () => {
//       toast.error('Failed to delete user');
//     },
//   });

//   const updateMutation = useMutation(updateUser, {
//     onSuccess: () => {
//       queryClient.invalidateQueries('users');
//       toast.success('User updated successfully');
//     },
//     onError: () => {
//       toast.error('Failed to update user');
//     },
//   });

//   const columns = React.useMemo(
//     () => [
//       { Header: 'ID', accessor: '_id' },
//       { Header: 'Username', accessor: 'username' },
//       { Header: 'Name', accessor: 'name' },
//       { Header: 'Email', accessor: 'email' },
//       { Header: 'Phone', accessor: 'phone' },
//       { Header: 'Status', accessor: 'status', Cell: ({ value }) => (value ? 'Active' : 'Inactive') },
//       {
//         Header: 'Actions',
//         Cell: ({ row }) => (
//           <div className="flex space-x-2">
//             <button
//               onClick={() => handleDelete(row.original._id)}
//               className="bg-red-500 text-white px-2 py-1 rounded"
//             >
//               Delete
//             </button>
//             <button
//               onClick={() => handleUpdate(row.original._id, row.original)}
//               className="bg-blue-500 text-white px-2 py-1 rounded"
//             >
//               Update
//             </button>
//           </div>
//         ),
//       },
//     ],
//     []
//   );

//   const tableInstance = useTable(
//     {
//       columns,
//       data: data || [],
//       initialState: {
//         pageIndex,
//         pageSize: limit,
//       },
//     },
//     usePagination
//   );

//   const {
//     getTableProps,
//     getTableBodyProps,
//     headerGroups,
//     rows,
//     prepareRow,
//     canPreviousPage,
//     canNextPage,
//     pageCount,
//     gotoPage,
//     nextPage,
//     previousPage,
//     state: { pageIndex: currentPageIndex },
//   } = tableInstance;

//   const handleDelete = (id) => {
//     if (window.confirm('Are you sure you want to delete this user?')) {
//       deleteMutation.mutate(id);
//     }
//   };

//   const handleUpdate = (id, currentUserData) => {
//     const put = {
//       username: prompt('Enter new username:', currentUserData.username),
//       name: prompt('Enter new name:', currentUserData.name),
//       email: prompt('Enter new email:', currentUserData.email),
//       phone: prompt('Enter new phone number:', currentUserData.phone),
//       status: window.confirm('Set status to Active?') ? true : false,
//     };
//     updateMutation.mutate({ id, put });
//   };

//   if (isLoading) return <p>Loading...</p>;
//   if (isError) return <p>Error: {error.message}</p>;

//   return (
//     <div className="p-4">
//       <ToastContainer />
//       <table
//         {...getTableProps()}
//         className="table-auto w-full border-collapse border border-gray-200"
//       >
//         <thead>
//           {headerGroups.map((headerGroup) => (
//             <tr {...headerGroup.getHeaderGroupProps()}>
//               {headerGroup.headers.map((column) => (
//                 <th
//                   {...column.getHeaderProps()}
//                   className="border border-gray-300 p-2 text-left"
//                 >
//                   {column.render('Header')}
//                 </th>
//               ))}
//             </tr>
//           ))}
//         </thead>
//         <tbody {...getTableBodyProps()}>
//           {rows.map((row) => {
//             prepareRow(row);
//             return (
//               <tr {...row.getRowProps()}>
//                 {row.cells.map((cell) => (
//                   <td
//                     {...cell.getCellProps()}
//                     className="border border-gray-300 p-2"
//                   >
//                     {cell.render('Cell')}
//                   </td>
//                 ))}
//               </tr>
//             );
//           })}
//         </tbody>
//       </table>

//       <div className="flex justify-between items-center mt-4">
//         <button
//           onClick={() => {
//             previousPage();
//             setPageIndex(pageIndex - 1);
//           }}
//           disabled={!canPreviousPage}
//           className="bg-gray-500 text-white px-4 py-2 rounded"
//         >
//           Previous
//         </button>
//         <span>
//           Page {currentPageIndex + 1} of {pageCount}
//         </span>
//         <button
//           onClick={() => {
//             nextPage();
//             setPageIndex(pageIndex + 1);
//           }}
//           disabled={!canNextPage}
//           className="bg-gray-500 text-white px-4 py-2 rounded"
//         >
//           Next
//         </button>
//       </div>
//     </div>
//   );
// };

// export default UserTable;


